"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intl-messageformat";
exports.ids = ["vendor-chunks/intl-messageformat"];
exports.modules = {

/***/ "(ssr)/./node_modules/intl-messageformat/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.ErrorCode),\n/* harmony export */   FormatError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.FormatError),\n/* harmony export */   IntlMessageFormat: () => (/* reexport safe */ _src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat),\n/* harmony export */   InvalidValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.MissingValueError),\n/* harmony export */   PART_TYPE: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.PART_TYPE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatToParts: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/core */ \"(ssr)/./node_modules/intl-messageformat/lib/src/core.js\");\n/* harmony import */ var _src_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/error */ \"(ssr)/./node_modules/intl-messageformat/lib/src/error.js\");\n/* harmony import */ var _src_formatters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/formatters */ \"(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQSxHQUMrQztBQUNwQjtBQUNDO0FBQ0s7QUFDSjtBQUM3QixpRUFBZUEsd0RBQWlCQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGlsaW5ndWFsLWJsb2cvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9pbmRleC5qcz9lMTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG5TZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cbmltcG9ydCB7IEludGxNZXNzYWdlRm9ybWF0IH0gZnJvbSAnLi9zcmMvY29yZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jb3JlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Vycm9yJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Zvcm1hdHRlcnMnO1xuZXhwb3J0IHsgSW50bE1lc3NhZ2VGb3JtYXQgfTtcbmV4cG9ydCBkZWZhdWx0IEludGxNZXNzYWdlRm9ybWF0O1xuIl0sIm5hbWVzIjpbIkludGxNZXNzYWdlRm9ybWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/core.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {\n        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function(all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function() {\n            return {\n                get: function(key) {\n                    return store[key];\n                },\n                set: function(key, value) {\n                    store[key] = value;\n                }\n            };\n        }\n    };\n}\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) {\n        cache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n    }\n    return {\n        getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        })\n    };\n}\nvar IntlMessageFormat = /** @class */ function() {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        if (locales === void 0) {\n            locales = IntlMessageFormat.defaultLocale;\n        }\n        var _this = this;\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n        this.format = function(values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function(all, part) {\n                if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== \"string\") {\n                    all.push(part.value);\n                } else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || \"\";\n            }\n            return result;\n        };\n        this.formatToParts = function(values) {\n            return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function() {\n            var _a;\n            return {\n                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n            };\n        };\n        this.getAst = function() {\n            return _this.ast;\n        };\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n        if (typeof message === \"string\") {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError(\"IntlMessageFormat.__parse must be set to process `message` of type `string`\");\n            }\n            var _a = opts || {}, formatters = _a.formatters, parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"formatters\"\n            ]);\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n                locale: this.resolvedLocale\n            }));\n        } else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError(\"A message must be provided as a String or AST.\");\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function() {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.resolveLocale = function(locales) {\n        if (typeof Intl.Locale === \"undefined\") {\n            return;\n        }\n        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n        if (supportedLocales.length > 0) {\n            return new Intl.Locale(supportedLocales[0]);\n        }\n        return new Intl.Locale(typeof locales === \"string\" ? locales : locales[0]);\n    };\n    IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            integer: {\n                maximumFractionDigits: 0\n            },\n            currency: {\n                style: \"currency\"\n            },\n            percent: {\n                style: \"percent\"\n            }\n        },\n        date: {\n            short: {\n                month: \"numeric\",\n                day: \"numeric\",\n                year: \"2-digit\"\n            },\n            medium: {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            long: {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            full: {\n                weekday: \"long\",\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            }\n        },\n        time: {\n            short: {\n                hour: \"numeric\",\n                minute: \"numeric\"\n            },\n            medium: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\"\n            },\n            long: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            },\n            full: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            }\n        }\n    };\n    return IntlMessageFormat;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/error.js":
/*!**********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function(ErrorCode) {\n    // When we have a placeholder but no value to format\n    ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n    // When value supplied is invalid\n    ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n    // When we need specific Intl API but it's not available\n    ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n    function FormatError(msg, code, originalMessage) {\n        var _this = _super.call(this, msg) || this;\n        _this.code = code;\n        _this.originalMessage = originalMessage;\n        return _this;\n    }\n    FormatError.prototype.toString = function() {\n        return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n    };\n    return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n    function InvalidValueError(variableId, value, options, originalMessage) {\n        return _super.call(this, 'Invalid values for \"'.concat(variableId, '\": \"').concat(value, '\". Options are \"').concat(Object.keys(options).join('\", \"'), '\"'), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n    function InvalidValueTypeError(value, type, originalMessage) {\n        return _super.call(this, 'Value for \"'.concat(value, '\" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n    function MissingValueError(variableId, originalMessage) {\n        return _super.call(this, 'The intl string context variable \"'.concat(variableId, '\" was not provided to the string \"').concat(originalMessage, '\"'), ErrorCode.MISSING_VALUE, originalMessage) || this;\n    }\n    return MissingValueError;\n}(FormatError);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQzNCLElBQUlDLFVBQVU7QUFDcEIsVUFBVUEsU0FBUztJQUNoQixvREFBb0Q7SUFDcERBLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztJQUM3QixpQ0FBaUM7SUFDakNBLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztJQUM3Qix3REFBd0Q7SUFDeERBLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRztBQUNwQyxHQUFHQSxhQUFjQSxDQUFBQSxZQUFZLENBQUM7QUFDOUIsSUFBSUMsY0FBYyxXQUFXLEdBQUksU0FBVUMsTUFBTTtJQUM3Q0gsZ0RBQVNBLENBQUNFLGFBQWFDO0lBQ3ZCLFNBQVNELFlBQVlFLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxlQUFlO1FBQzNDLElBQUlDLFFBQVFKLE9BQU9LLElBQUksQ0FBQyxJQUFJLEVBQUVKLFFBQVEsSUFBSTtRQUMxQ0csTUFBTUYsSUFBSSxHQUFHQTtRQUNiRSxNQUFNRCxlQUFlLEdBQUdBO1FBQ3hCLE9BQU9DO0lBQ1g7SUFDQUwsWUFBWU8sU0FBUyxDQUFDQyxRQUFRLEdBQUc7UUFDN0IsT0FBTyxvQkFBb0JDLE1BQU0sQ0FBQyxJQUFJLENBQUNOLElBQUksRUFBRSxNQUFNTSxNQUFNLENBQUMsSUFBSSxDQUFDQyxPQUFPO0lBQzFFO0lBQ0EsT0FBT1Y7QUFDWCxFQUFFVztBQUNxQjtBQUN2QixJQUFJQyxvQkFBb0IsV0FBVyxHQUFJLFNBQVVYLE1BQU07SUFDbkRILGdEQUFTQSxDQUFDYyxtQkFBbUJYO0lBQzdCLFNBQVNXLGtCQUFrQkMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRVgsZUFBZTtRQUNsRSxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLHVCQUF3QkcsTUFBTSxDQUFDSSxZQUFZLFFBQVVKLE1BQU0sQ0FBQ0ssT0FBTyxvQkFBc0JMLE1BQU0sQ0FBQ08sT0FBT0MsSUFBSSxDQUFDRixTQUFTRyxJQUFJLENBQUMsU0FBUyxNQUFPbkIsVUFBVW9CLGFBQWEsRUFBRWYsb0JBQW9CLElBQUk7SUFDeE47SUFDQSxPQUFPUTtBQUNYLEVBQUVaO0FBQzJCO0FBQzdCLElBQUlvQix3QkFBd0IsV0FBVyxHQUFJLFNBQVVuQixNQUFNO0lBQ3ZESCxnREFBU0EsQ0FBQ3NCLHVCQUF1Qm5CO0lBQ2pDLFNBQVNtQixzQkFBc0JOLEtBQUssRUFBRU8sSUFBSSxFQUFFakIsZUFBZTtRQUN2RCxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWVHLE1BQU0sQ0FBQ0ssT0FBTyxzQkFBdUJMLE1BQU0sQ0FBQ1ksT0FBT3RCLFVBQVVvQixhQUFhLEVBQUVmLG9CQUFvQixJQUFJO0lBQ2hKO0lBQ0EsT0FBT2dCO0FBQ1gsRUFBRXBCO0FBQytCO0FBQ2pDLElBQUlzQixvQkFBb0IsV0FBVyxHQUFJLFNBQVVyQixNQUFNO0lBQ25ESCxnREFBU0EsQ0FBQ3dCLG1CQUFtQnJCO0lBQzdCLFNBQVNxQixrQkFBa0JULFVBQVUsRUFBRVQsZUFBZTtRQUNsRCxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLHFDQUFzQ0csTUFBTSxDQUFDSSxZQUFZLHNDQUF3Q0osTUFBTSxDQUFDTCxpQkFBaUIsTUFBT0wsVUFBVXdCLGFBQWEsRUFBRW5CLG9CQUFvQixJQUFJO0lBQzlNO0lBQ0EsT0FBT2tCO0FBQ1gsRUFBRXRCO0FBQzJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGlsaW5ndWFsLWJsb2cvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanM/NDI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgRXJyb3JDb2RlO1xuKGZ1bmN0aW9uIChFcnJvckNvZGUpIHtcbiAgICAvLyBXaGVuIHdlIGhhdmUgYSBwbGFjZWhvbGRlciBidXQgbm8gdmFsdWUgdG8gZm9ybWF0XG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19WQUxVRVwiXSA9IFwiTUlTU0lOR19WQUxVRVwiO1xuICAgIC8vIFdoZW4gdmFsdWUgc3VwcGxpZWQgaXMgaW52YWxpZFxuICAgIEVycm9yQ29kZVtcIklOVkFMSURfVkFMVUVcIl0gPSBcIklOVkFMSURfVkFMVUVcIjtcbiAgICAvLyBXaGVuIHdlIG5lZWQgc3BlY2lmaWMgSW50bCBBUEkgYnV0IGl0J3Mgbm90IGF2YWlsYWJsZVxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfSU5UTF9BUElcIl0gPSBcIk1JU1NJTkdfSU5UTF9BUElcIjtcbn0pKEVycm9yQ29kZSB8fCAoRXJyb3JDb2RlID0ge30pKTtcbnZhciBGb3JtYXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0RXJyb3IobXNnLCBjb2RlLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgX3RoaXMub3JpZ2luYWxNZXNzYWdlID0gb3JpZ2luYWxNZXNzYWdlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiW2Zvcm1hdGpzIEVycm9yOiBcIi5jb25jYXQodGhpcy5jb2RlLCBcIl0gXCIpLmNvbmNhdCh0aGlzLm1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1hdEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgRm9ybWF0RXJyb3IgfTtcbnZhciBJbnZhbGlkVmFsdWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZFZhbHVlRXJyb3IodmFyaWFibGVJZCwgdmFsdWUsIG9wdGlvbnMsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJJbnZhbGlkIHZhbHVlcyBmb3IgXFxcIlwiLmNvbmNhdCh2YXJpYWJsZUlkLCBcIlxcXCI6IFxcXCJcIikuY29uY2F0KHZhbHVlLCBcIlxcXCIuIE9wdGlvbnMgYXJlIFxcXCJcIikuY29uY2F0KE9iamVjdC5rZXlzKG9wdGlvbnMpLmpvaW4oJ1wiLCBcIicpLCBcIlxcXCJcIiksIEVycm9yQ29kZS5JTlZBTElEX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkVmFsdWVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRWYWx1ZUVycm9yIH07XG52YXIgSW52YWxpZFZhbHVlVHlwZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkVmFsdWVUeXBlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZFZhbHVlVHlwZUVycm9yKHZhbHVlLCB0eXBlLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiVmFsdWUgZm9yIFxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIiBtdXN0IGJlIG9mIHR5cGUgXCIpLmNvbmNhdCh0eXBlKSwgRXJyb3JDb2RlLklOVkFMSURfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRWYWx1ZVR5cGVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRWYWx1ZVR5cGVFcnJvciB9O1xudmFyIE1pc3NpbmdWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nVmFsdWVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nVmFsdWVFcnJvcih2YXJpYWJsZUlkLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiVGhlIGludGwgc3RyaW5nIGNvbnRleHQgdmFyaWFibGUgXFxcIlwiLmNvbmNhdCh2YXJpYWJsZUlkLCBcIlxcXCIgd2FzIG5vdCBwcm92aWRlZCB0byB0aGUgc3RyaW5nIFxcXCJcIikuY29uY2F0KG9yaWdpbmFsTWVzc2FnZSwgXCJcXFwiXCIpLCBFcnJvckNvZGUuTUlTU0lOR19WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ1ZhbHVlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nVmFsdWVFcnJvciB9O1xuIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIkVycm9yQ29kZSIsIkZvcm1hdEVycm9yIiwiX3N1cGVyIiwibXNnIiwiY29kZSIsIm9yaWdpbmFsTWVzc2FnZSIsIl90aGlzIiwiY2FsbCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uY2F0IiwibWVzc2FnZSIsIkVycm9yIiwiSW52YWxpZFZhbHVlRXJyb3IiLCJ2YXJpYWJsZUlkIiwidmFsdWUiLCJvcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImpvaW4iLCJJTlZBTElEX1ZBTFVFIiwiSW52YWxpZFZhbHVlVHlwZUVycm9yIiwidHlwZSIsIk1pc3NpbmdWYWx1ZUVycm9yIiwiTUlTU0lOR19WQUxVRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js":
/*!***************************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/formatters.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function(PART_TYPE) {\n    PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n    PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function(all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n            all.push(part);\n        } else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction isFormatXMLElementFn(el) {\n    return typeof el === \"function\";\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n        return [\n            {\n                type: PART_TYPE.literal,\n                value: els[0].value\n            }\n        ];\n    }\n    var result = [];\n    for(var _i = 0, els_1 = els; _i < els_1.length; _i++){\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n            result.push({\n                type: PART_TYPE.literal,\n                value: el.value\n            });\n            continue;\n        }\n        // TODO: should this part be literal type?\n        // Replace `#` in plural rules with the actual numeric value.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n            if (typeof currentPluralValue === \"number\") {\n                result.push({\n                    type: PART_TYPE.literal,\n                    value: formatters.getNumberFormat(locales).format(currentPluralValue)\n                });\n            }\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n        }\n        var value = values[varName];\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n            if (!value || typeof value === \"string\" || typeof value === \"number\") {\n                value = typeof value === \"string\" || typeof value === \"number\" ? String(value) : \"\";\n            }\n            result.push({\n                type: typeof value === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                value: value\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            if (style && style.scale) {\n                value = value * (style.scale || 1);\n            }\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getNumberFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n            var children = el.children, value_1 = el.value;\n            var formatFn = values[value_1];\n            if (!isFormatXMLElementFn(formatFn)) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, \"function\", originalMessage);\n            }\n            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n            var chunks = formatFn(parts.map(function(p) {\n                return p.value;\n            }));\n            if (!Array.isArray(chunks)) {\n                chunks = [\n                    chunks\n                ];\n            }\n            result.push.apply(result, chunks.map(function(c) {\n                return {\n                    type: typeof c === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                    value: c\n                };\n            }));\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n            var opt = el.options[\"=\".concat(value)];\n            if (!opt) {\n                if (!Intl.PluralRules) {\n                    throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError('Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\\n', _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n                }\n                var rule = formatters.getPluralRules(locales, {\n                    type: el.pluralType\n                }).select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.ErrorCode),\n/* harmony export */   FormatError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.FormatError),\n/* harmony export */   IntlMessageFormat: () => (/* reexport safe */ _src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat),\n/* harmony export */   InvalidValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.MissingValueError),\n/* harmony export */   PART_TYPE: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.PART_TYPE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatToParts: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/core */ \"(rsc)/./node_modules/intl-messageformat/lib/src/core.js\");\n/* harmony import */ var _src_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/error */ \"(rsc)/./node_modules/intl-messageformat/lib/src/error.js\");\n/* harmony import */ var _src_formatters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/formatters */ \"(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQSxHQUMrQztBQUNwQjtBQUNDO0FBQ0s7QUFDSjtBQUM3QixpRUFBZUEsd0RBQWlCQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGlsaW5ndWFsLWJsb2cvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9pbmRleC5qcz9lMTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG5TZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cbmltcG9ydCB7IEludGxNZXNzYWdlRm9ybWF0IH0gZnJvbSAnLi9zcmMvY29yZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jb3JlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Vycm9yJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Zvcm1hdHRlcnMnO1xuZXhwb3J0IHsgSW50bE1lc3NhZ2VGb3JtYXQgfTtcbmV4cG9ydCBkZWZhdWx0IEludGxNZXNzYWdlRm9ybWF0O1xuIl0sIm5hbWVzIjpbIkludGxNZXNzYWdlRm9ybWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/core.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {\n        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function(all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function() {\n            return {\n                get: function(key) {\n                    return store[key];\n                },\n                set: function(key, value) {\n                    store[key] = value;\n                }\n            };\n        }\n    };\n}\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) {\n        cache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n    }\n    return {\n        getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        })\n    };\n}\nvar IntlMessageFormat = /** @class */ function() {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        if (locales === void 0) {\n            locales = IntlMessageFormat.defaultLocale;\n        }\n        var _this = this;\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n        this.format = function(values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function(all, part) {\n                if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== \"string\") {\n                    all.push(part.value);\n                } else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || \"\";\n            }\n            return result;\n        };\n        this.formatToParts = function(values) {\n            return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function() {\n            var _a;\n            return {\n                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n            };\n        };\n        this.getAst = function() {\n            return _this.ast;\n        };\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n        if (typeof message === \"string\") {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError(\"IntlMessageFormat.__parse must be set to process `message` of type `string`\");\n            }\n            var _a = opts || {}, formatters = _a.formatters, parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"formatters\"\n            ]);\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n                locale: this.resolvedLocale\n            }));\n        } else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError(\"A message must be provided as a String or AST.\");\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function() {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.resolveLocale = function(locales) {\n        if (typeof Intl.Locale === \"undefined\") {\n            return;\n        }\n        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n        if (supportedLocales.length > 0) {\n            return new Intl.Locale(supportedLocales[0]);\n        }\n        return new Intl.Locale(typeof locales === \"string\" ? locales : locales[0]);\n    };\n    IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            integer: {\n                maximumFractionDigits: 0\n            },\n            currency: {\n                style: \"currency\"\n            },\n            percent: {\n                style: \"percent\"\n            }\n        },\n        date: {\n            short: {\n                month: \"numeric\",\n                day: \"numeric\",\n                year: \"2-digit\"\n            },\n            medium: {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            long: {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            full: {\n                weekday: \"long\",\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            }\n        },\n        time: {\n            short: {\n                hour: \"numeric\",\n                minute: \"numeric\"\n            },\n            medium: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\"\n            },\n            long: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            },\n            full: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            }\n        }\n    };\n    return IntlMessageFormat;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/error.js":
/*!**********************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function(ErrorCode) {\n    // When we have a placeholder but no value to format\n    ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n    // When value supplied is invalid\n    ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n    // When we need specific Intl API but it's not available\n    ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n    function FormatError(msg, code, originalMessage) {\n        var _this = _super.call(this, msg) || this;\n        _this.code = code;\n        _this.originalMessage = originalMessage;\n        return _this;\n    }\n    FormatError.prototype.toString = function() {\n        return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n    };\n    return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n    function InvalidValueError(variableId, value, options, originalMessage) {\n        return _super.call(this, 'Invalid values for \"'.concat(variableId, '\": \"').concat(value, '\". Options are \"').concat(Object.keys(options).join('\", \"'), '\"'), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n    function InvalidValueTypeError(value, type, originalMessage) {\n        return _super.call(this, 'Value for \"'.concat(value, '\" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n    function MissingValueError(variableId, originalMessage) {\n        return _super.call(this, 'The intl string context variable \"'.concat(variableId, '\" was not provided to the string \"').concat(originalMessage, '\"'), ErrorCode.MISSING_VALUE, originalMessage) || this;\n    }\n    return MissingValueError;\n}(FormatError);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQzNCLElBQUlDLFVBQVU7QUFDcEIsVUFBVUEsU0FBUztJQUNoQixvREFBb0Q7SUFDcERBLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztJQUM3QixpQ0FBaUM7SUFDakNBLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztJQUM3Qix3REFBd0Q7SUFDeERBLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRztBQUNwQyxHQUFHQSxhQUFjQSxDQUFBQSxZQUFZLENBQUM7QUFDOUIsSUFBSUMsY0FBYyxXQUFXLEdBQUksU0FBVUMsTUFBTTtJQUM3Q0gsZ0RBQVNBLENBQUNFLGFBQWFDO0lBQ3ZCLFNBQVNELFlBQVlFLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxlQUFlO1FBQzNDLElBQUlDLFFBQVFKLE9BQU9LLElBQUksQ0FBQyxJQUFJLEVBQUVKLFFBQVEsSUFBSTtRQUMxQ0csTUFBTUYsSUFBSSxHQUFHQTtRQUNiRSxNQUFNRCxlQUFlLEdBQUdBO1FBQ3hCLE9BQU9DO0lBQ1g7SUFDQUwsWUFBWU8sU0FBUyxDQUFDQyxRQUFRLEdBQUc7UUFDN0IsT0FBTyxvQkFBb0JDLE1BQU0sQ0FBQyxJQUFJLENBQUNOLElBQUksRUFBRSxNQUFNTSxNQUFNLENBQUMsSUFBSSxDQUFDQyxPQUFPO0lBQzFFO0lBQ0EsT0FBT1Y7QUFDWCxFQUFFVztBQUNxQjtBQUN2QixJQUFJQyxvQkFBb0IsV0FBVyxHQUFJLFNBQVVYLE1BQU07SUFDbkRILGdEQUFTQSxDQUFDYyxtQkFBbUJYO0lBQzdCLFNBQVNXLGtCQUFrQkMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRVgsZUFBZTtRQUNsRSxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLHVCQUF3QkcsTUFBTSxDQUFDSSxZQUFZLFFBQVVKLE1BQU0sQ0FBQ0ssT0FBTyxvQkFBc0JMLE1BQU0sQ0FBQ08sT0FBT0MsSUFBSSxDQUFDRixTQUFTRyxJQUFJLENBQUMsU0FBUyxNQUFPbkIsVUFBVW9CLGFBQWEsRUFBRWYsb0JBQW9CLElBQUk7SUFDeE47SUFDQSxPQUFPUTtBQUNYLEVBQUVaO0FBQzJCO0FBQzdCLElBQUlvQix3QkFBd0IsV0FBVyxHQUFJLFNBQVVuQixNQUFNO0lBQ3ZESCxnREFBU0EsQ0FBQ3NCLHVCQUF1Qm5CO0lBQ2pDLFNBQVNtQixzQkFBc0JOLEtBQUssRUFBRU8sSUFBSSxFQUFFakIsZUFBZTtRQUN2RCxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWVHLE1BQU0sQ0FBQ0ssT0FBTyxzQkFBdUJMLE1BQU0sQ0FBQ1ksT0FBT3RCLFVBQVVvQixhQUFhLEVBQUVmLG9CQUFvQixJQUFJO0lBQ2hKO0lBQ0EsT0FBT2dCO0FBQ1gsRUFBRXBCO0FBQytCO0FBQ2pDLElBQUlzQixvQkFBb0IsV0FBVyxHQUFJLFNBQVVyQixNQUFNO0lBQ25ESCxnREFBU0EsQ0FBQ3dCLG1CQUFtQnJCO0lBQzdCLFNBQVNxQixrQkFBa0JULFVBQVUsRUFBRVQsZUFBZTtRQUNsRCxPQUFPSCxPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFLHFDQUFzQ0csTUFBTSxDQUFDSSxZQUFZLHNDQUF3Q0osTUFBTSxDQUFDTCxpQkFBaUIsTUFBT0wsVUFBVXdCLGFBQWEsRUFBRW5CLG9CQUFvQixJQUFJO0lBQzlNO0lBQ0EsT0FBT2tCO0FBQ1gsRUFBRXRCO0FBQzJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGlsaW5ndWFsLWJsb2cvLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9zcmMvZXJyb3IuanM/NDI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgRXJyb3JDb2RlO1xuKGZ1bmN0aW9uIChFcnJvckNvZGUpIHtcbiAgICAvLyBXaGVuIHdlIGhhdmUgYSBwbGFjZWhvbGRlciBidXQgbm8gdmFsdWUgdG8gZm9ybWF0XG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19WQUxVRVwiXSA9IFwiTUlTU0lOR19WQUxVRVwiO1xuICAgIC8vIFdoZW4gdmFsdWUgc3VwcGxpZWQgaXMgaW52YWxpZFxuICAgIEVycm9yQ29kZVtcIklOVkFMSURfVkFMVUVcIl0gPSBcIklOVkFMSURfVkFMVUVcIjtcbiAgICAvLyBXaGVuIHdlIG5lZWQgc3BlY2lmaWMgSW50bCBBUEkgYnV0IGl0J3Mgbm90IGF2YWlsYWJsZVxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfSU5UTF9BUElcIl0gPSBcIk1JU1NJTkdfSU5UTF9BUElcIjtcbn0pKEVycm9yQ29kZSB8fCAoRXJyb3JDb2RlID0ge30pKTtcbnZhciBGb3JtYXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0RXJyb3IobXNnLCBjb2RlLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgX3RoaXMub3JpZ2luYWxNZXNzYWdlID0gb3JpZ2luYWxNZXNzYWdlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiW2Zvcm1hdGpzIEVycm9yOiBcIi5jb25jYXQodGhpcy5jb2RlLCBcIl0gXCIpLmNvbmNhdCh0aGlzLm1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1hdEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgRm9ybWF0RXJyb3IgfTtcbnZhciBJbnZhbGlkVmFsdWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZFZhbHVlRXJyb3IodmFyaWFibGVJZCwgdmFsdWUsIG9wdGlvbnMsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJJbnZhbGlkIHZhbHVlcyBmb3IgXFxcIlwiLmNvbmNhdCh2YXJpYWJsZUlkLCBcIlxcXCI6IFxcXCJcIikuY29uY2F0KHZhbHVlLCBcIlxcXCIuIE9wdGlvbnMgYXJlIFxcXCJcIikuY29uY2F0KE9iamVjdC5rZXlzKG9wdGlvbnMpLmpvaW4oJ1wiLCBcIicpLCBcIlxcXCJcIiksIEVycm9yQ29kZS5JTlZBTElEX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkVmFsdWVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRWYWx1ZUVycm9yIH07XG52YXIgSW52YWxpZFZhbHVlVHlwZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkVmFsdWVUeXBlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZFZhbHVlVHlwZUVycm9yKHZhbHVlLCB0eXBlLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiVmFsdWUgZm9yIFxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIiBtdXN0IGJlIG9mIHR5cGUgXCIpLmNvbmNhdCh0eXBlKSwgRXJyb3JDb2RlLklOVkFMSURfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRWYWx1ZVR5cGVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IEludmFsaWRWYWx1ZVR5cGVFcnJvciB9O1xudmFyIE1pc3NpbmdWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nVmFsdWVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nVmFsdWVFcnJvcih2YXJpYWJsZUlkLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiVGhlIGludGwgc3RyaW5nIGNvbnRleHQgdmFyaWFibGUgXFxcIlwiLmNvbmNhdCh2YXJpYWJsZUlkLCBcIlxcXCIgd2FzIG5vdCBwcm92aWRlZCB0byB0aGUgc3RyaW5nIFxcXCJcIikuY29uY2F0KG9yaWdpbmFsTWVzc2FnZSwgXCJcXFwiXCIpLCBFcnJvckNvZGUuTUlTU0lOR19WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWlzc2luZ1ZhbHVlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBNaXNzaW5nVmFsdWVFcnJvciB9O1xuIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIkVycm9yQ29kZSIsIkZvcm1hdEVycm9yIiwiX3N1cGVyIiwibXNnIiwiY29kZSIsIm9yaWdpbmFsTWVzc2FnZSIsIl90aGlzIiwiY2FsbCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uY2F0IiwibWVzc2FnZSIsIkVycm9yIiwiSW52YWxpZFZhbHVlRXJyb3IiLCJ2YXJpYWJsZUlkIiwidmFsdWUiLCJvcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImpvaW4iLCJJTlZBTElEX1ZBTFVFIiwiSW52YWxpZFZhbHVlVHlwZUVycm9yIiwidHlwZSIsIk1pc3NpbmdWYWx1ZUVycm9yIiwiTUlTU0lOR19WQUxVRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js":
/*!***************************************************************!*\
  !*** ./node_modules/intl-messageformat/lib/src/formatters.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function(PART_TYPE) {\n    PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n    PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function(all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n            all.push(part);\n        } else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction isFormatXMLElementFn(el) {\n    return typeof el === \"function\";\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n        return [\n            {\n                type: PART_TYPE.literal,\n                value: els[0].value\n            }\n        ];\n    }\n    var result = [];\n    for(var _i = 0, els_1 = els; _i < els_1.length; _i++){\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n            result.push({\n                type: PART_TYPE.literal,\n                value: el.value\n            });\n            continue;\n        }\n        // TODO: should this part be literal type?\n        // Replace `#` in plural rules with the actual numeric value.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n            if (typeof currentPluralValue === \"number\") {\n                result.push({\n                    type: PART_TYPE.literal,\n                    value: formatters.getNumberFormat(locales).format(currentPluralValue)\n                });\n            }\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n        }\n        var value = values[varName];\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n            if (!value || typeof value === \"string\" || typeof value === \"number\") {\n                value = typeof value === \"string\" || typeof value === \"number\" ? String(value) : \"\";\n            }\n            result.push({\n                type: typeof value === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                value: value\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            if (style && style.scale) {\n                value = value * (style.scale || 1);\n            }\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getNumberFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n            var children = el.children, value_1 = el.value;\n            var formatFn = values[value_1];\n            if (!isFormatXMLElementFn(formatFn)) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, \"function\", originalMessage);\n            }\n            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n            var chunks = formatFn(parts.map(function(p) {\n                return p.value;\n            }));\n            if (!Array.isArray(chunks)) {\n                chunks = [\n                    chunks\n                ];\n            }\n            result.push.apply(result, chunks.map(function(c) {\n                return {\n                    type: typeof c === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                    value: c\n                };\n            }));\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n            var opt = el.options[\"=\".concat(value)];\n            if (!opt) {\n                if (!Intl.PluralRules) {\n                    throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError('Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\\n', _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n                }\n                var rule = formatters.getPluralRules(locales, {\n                    type: el.pluralType\n                }).select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ })

};
;